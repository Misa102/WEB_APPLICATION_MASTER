{"ast":null,"code":"import { takeLatest, call, put } from \"redux-saga/effects\";\nimport * as actions from '../actions';\nimport * as api from '../../api';\n\n// generator fct quand il y a un action a lieu\nfunction* fetchPostsSaga(action) {\n  try {\n    const posts = yield call(api.fetchPosts);\n    console.log('[posts]', posts);\n    //trigger action\n    yield put(actions.getPosts.getPostsSuccess(posts.data));\n  } catch (err) {\n    console.error(err);\n    yield put(actions.getPosts.getPostsFailure(err));\n  }\n}\nfunction* createPostSaga(action) {\n  try {\n    const post = yield call(api.createPost, action.payload);\n    console.log('[createPostSaga - post]', post);\n    //trigger action\n    yield put(actions.createPost.createPostSuccess(post));\n  } catch (err) {\n    console.error(err);\n    yield put(actions.createPost.createPostFailure(err));\n  }\n}\nfunction* mySaga() {\n  //actions.getPosts.getPostsRequest écoute une action getPostsRequest\n  // quand il a vu qu'il y a une action trigger, fetchPostSaga va exécuter\n  // et puis il va appeller api.fetchPosts vers api/index.js \n  // dans api/index.js, request va appeller API avec router URL avec methode get\n  // puis résultat va dans variable posts\n  yield takeLatest(actions.getPosts.getPostsRequest, fetchPostsSaga);\n  yield takeLatest(actions.createPost.createPostRequest, createPostSaga);\n}\n\n//generator function ES6\n\nexport default mySaga;","map":{"version":3,"names":["takeLatest","call","put","actions","api","fetchPostsSaga","action","posts","fetchPosts","console","log","getPosts","getPostsSuccess","data","err","error","getPostsFailure","createPostSaga","post","createPost","payload","createPostSuccess","createPostFailure","mySaga","getPostsRequest","createPostRequest"],"sources":["D:/WEB_PROJECT/client/src/redux/sagas/index.js"],"sourcesContent":["import { takeLatest, call, put } from \"redux-saga/effects\";\r\nimport * as actions from '../actions';\r\nimport * as api from '../../api';\r\n\r\n// generator fct quand il y a un action a lieu\r\nfunction* fetchPostsSaga(action){\r\n    try{\r\n        const posts = yield call(api.fetchPosts);\r\n        console.log('[posts]', posts);\r\n        //trigger action\r\n        yield put(actions.getPosts.getPostsSuccess(posts.data));\r\n    }\r\n    catch (err){\r\n        console.error(err);\r\n        yield put(actions.getPosts.getPostsFailure(err));\r\n    }\r\n    \r\n}\r\n\r\nfunction* createPostSaga(action){\r\n    try{\r\n        const post = yield call(api.createPost, action.payload);\r\n        console.log('[createPostSaga - post]', post);\r\n        //trigger action\r\n        yield put(actions.createPost.createPostSuccess(post));\r\n    }\r\n    catch (err){\r\n        console.error(err);\r\n        yield put(actions.createPost.createPostFailure(err));\r\n    }\r\n    \r\n}\r\n\r\n\r\nfunction* mySaga(){\r\n    //actions.getPosts.getPostsRequest écoute une action getPostsRequest\r\n    // quand il a vu qu'il y a une action trigger, fetchPostSaga va exécuter\r\n    // et puis il va appeller api.fetchPosts vers api/index.js \r\n    // dans api/index.js, request va appeller API avec router URL avec methode get\r\n    // puis résultat va dans variable posts\r\n    yield takeLatest(actions.getPosts.getPostsRequest, fetchPostsSaga);\r\n    yield takeLatest(actions.createPost.createPostRequest, createPostSaga);\r\n\r\n}\r\n\r\n//generator function ES6\r\n\r\nexport default mySaga;"],"mappings":"AAAA,SAASA,UAAU,EAAEC,IAAI,EAAEC,GAAG,QAAQ,oBAAoB;AAC1D,OAAO,KAAKC,OAAO,MAAM,YAAY;AACrC,OAAO,KAAKC,GAAG,MAAM,WAAW;;AAEhC;AACA,UAAUC,cAAcA,CAACC,MAAM,EAAC;EAC5B,IAAG;IACC,MAAMC,KAAK,GAAG,MAAMN,IAAI,CAACG,GAAG,CAACI,UAAU,CAAC;IACxCC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEH,KAAK,CAAC;IAC7B;IACA,MAAML,GAAG,CAACC,OAAO,CAACQ,QAAQ,CAACC,eAAe,CAACL,KAAK,CAACM,IAAI,CAAC,CAAC;EAC3D,CAAC,CACD,OAAOC,GAAG,EAAC;IACPL,OAAO,CAACM,KAAK,CAACD,GAAG,CAAC;IAClB,MAAMZ,GAAG,CAACC,OAAO,CAACQ,QAAQ,CAACK,eAAe,CAACF,GAAG,CAAC,CAAC;EACpD;AAEJ;AAEA,UAAUG,cAAcA,CAACX,MAAM,EAAC;EAC5B,IAAG;IACC,MAAMY,IAAI,GAAG,MAAMjB,IAAI,CAACG,GAAG,CAACe,UAAU,EAAEb,MAAM,CAACc,OAAO,CAAC;IACvDX,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEQ,IAAI,CAAC;IAC5C;IACA,MAAMhB,GAAG,CAACC,OAAO,CAACgB,UAAU,CAACE,iBAAiB,CAACH,IAAI,CAAC,CAAC;EACzD,CAAC,CACD,OAAOJ,GAAG,EAAC;IACPL,OAAO,CAACM,KAAK,CAACD,GAAG,CAAC;IAClB,MAAMZ,GAAG,CAACC,OAAO,CAACgB,UAAU,CAACG,iBAAiB,CAACR,GAAG,CAAC,CAAC;EACxD;AAEJ;AAGA,UAAUS,MAAMA,CAAA,EAAE;EACd;EACA;EACA;EACA;EACA;EACA,MAAMvB,UAAU,CAACG,OAAO,CAACQ,QAAQ,CAACa,eAAe,EAAEnB,cAAc,CAAC;EAClE,MAAML,UAAU,CAACG,OAAO,CAACgB,UAAU,CAACM,iBAAiB,EAAER,cAAc,CAAC;AAE1E;;AAEA;;AAEA,eAAeM,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}